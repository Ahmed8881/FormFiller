// Listen for messages from popup
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  if (request.action === 'fillForm') {
    const result = fillFormFields();
    sendResponse({ success: result });
  }
  return true; // Keep message channel open for async response
});

// Test data to fill forms
const testData = {
  // Name fields
  name: 'John Doe',
  firstName: 'John',
  lastName: 'Doe',
  fullName: 'John Doe',
  
  // Contact fields
  email: 'john.doe@example.com',
  phone: '5551234567',
  tel: '5551234567',
  mobile: '5551234567',
  
  // Address fields
  address: '123 Main Street',
  street: '123 Main Street',
  city: 'Springfield',
  state: 'IL',
  zip: '62701',
  zipcode: '62701',
  postal: '62701',
  country: 'United States',
  
  // Other common fields
  company: 'Acme Corp',
  username: 'johndoe',
  password: 'Test@12345',
  message: 'This is a test message generated by Auto Form Filler.',
  comments: 'This is a test comment.',
  age: '30',
  date: new Date().toISOString().split('T')[0]
};

function fillFormFields() {
  let fieldsFound = 0;
  
  // Find all input fields, textareas, and select elements
  const formElements = document.querySelectorAll('input, textarea, select');
  
  formElements.forEach(element => {
    // Skip hidden, submit, button fields
    if (element.type === 'hidden' || element.type === 'submit' || 
        element.type === 'button' || element.type === 'image') {
      return;
    }
    
    // Get field identifiers
    const name = element.name?.toLowerCase() || '';
    const id = element.id?.toLowerCase() || '';
    const placeholder = element.placeholder?.toLowerCase() || '';
    const type = element.type?.toLowerCase() || '';
    
    // Try to match and fill the field
    let filled = false;
    
    // Check for email
    if (type === 'email' || name.includes('email') || id.includes('email') || placeholder.includes('email')) {
      element.value = testData.email;
      filled = true;
    }
    // Check for phone
    else if (type === 'tel' || name.includes('phone') || name.includes('tel') || 
             id.includes('phone') || id.includes('tel') || placeholder.includes('phone')) {
      element.value = testData.phone;
      filled = true;
    }
    // Check for name fields
    else if (name.includes('firstname') || id.includes('firstname') || placeholder.includes('first')) {
      element.value = testData.firstName;
      filled = true;
    }
    else if (name.includes('lastname') || id.includes('lastname') || placeholder.includes('last')) {
      element.value = testData.lastName;
      filled = true;
    }
    else if (name.includes('name') || id.includes('name') || placeholder.includes('name')) {
      element.value = testData.name;
      filled = true;
    }
    // Check for address fields
    else if (name.includes('address') || name.includes('street') || 
             id.includes('address') || id.includes('street')) {
      element.value = testData.address;
      filled = true;
    }
    else if (name.includes('city') || id.includes('city')) {
      element.value = testData.city;
      filled = true;
    }
    else if (name.includes('state') || id.includes('state')) {
      element.value = testData.state;
      filled = true;
    }
    else if (name.includes('zip') || name.includes('postal') || 
             id.includes('zip') || id.includes('postal')) {
      element.value = testData.zip;
      filled = true;
    }
    // Check for password
    else if (type === 'password') {
      element.value = testData.password;
      filled = true;
    }
    // Check for date
    else if (type === 'date') {
      element.value = testData.date;
      filled = true;
    }
    // Check for message/comment
    else if (element.tagName === 'TEXTAREA') {
      element.value = testData.message;
      filled = true;
    }
    // Check for number/age
    else if (type === 'number' && (name.includes('age') || id.includes('age'))) {
      element.value = testData.age;
      filled = true;
    }
    
    if (filled) {
      fieldsFound++;
      // Trigger input event for frameworks like React
      element.dispatchEvent(new Event('input', { bubbles: true }));
      element.dispatchEvent(new Event('change', { bubbles: true }));
      
      // Visual feedback
      element.style.backgroundColor = '#90EE90';
      setTimeout(() => {
        element.style.backgroundColor = '';
      }, 1000);
    }
  });
  
  return fieldsFound > 0;
}